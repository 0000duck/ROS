



#if 0
        // FIXME: this totally assume ROS catkin folder layout
        std::string pkgname = path.substr(path.find_last_of('/') + 1);
        Globals._appproperties["Package"] = pkgname;
        std::string wspath = path;
        for (size_t i = 0; i < 4; i++)
            wspath = wspath.substr(0, wspath.find_last_of('/'));
        Globals._appproperties["Workspace"] = wspath + "/";

        std::string pkgpath = wspath + "/src/" + pkgname + "/config/" + pkgname + ".ini";
        std::string envstr = ExecuteShellCommand("export ROS_PACKAGE_PATH; cd " + wspath + "; /bin/bash -c \"source devel/setup.bash & env \"");
 //       std::cout << envstr << "\n";
        // This sets up tother application _appproperties name/value pairs: user, hostname
        SetupAppEnpathvironment();
pathpath
        // This hard coding of env variables is required for debugging with netbeans ide
        // If ROS environment variables are not set it cannot find "stuff"
  //      SetupRosEnvironment(); // needs to go before ROS!

  #endif
  // Confetti
#if 0
  for (size_t i = 0; i < 20; i++) {
      double x = ((double) i)*.01;
      Piece * p = new Piece(pScene);
      p->launch(x, 0.0, 1.0);

  }
#endif


#if 0
        std::vector<double> testjts = ToVector<double>(7, 1.30, -0.84, 0.08, 2.26, 2.96, -0.38, -1.28);
        tf::Pose testpose = ncs[1]->Kinematics()->FK(testjts);
        std::cout << "Joint vals " << VectorDump<double>(testjts).c_str() << "\n" << std::flush;
        std::cout << "kinpose " << RCS::DumpPoseSimple(testpose).c_str() << "\n";

        ncs[1]->Kinematics()->axis.push_back(Eigen::Vector3d(0, 0, -1));
        ncs[1]->Kinematics()->xyzorigin.push_back(Eigen::Vector3d(0, 0, 0));
        ncs[1]->Kinematics()->rpyorigin.push_back(Eigen::Vector3d(0, 0, -M_PI_2));
        testjts.push_back(0.0);
        std::vector<tf::Pose> poses = ncs[1]->Kinematics()->ComputeAllFk(testjts);
        std::cout << "genericpose " << RCS::DumpPoseSimple(poses.back()).c_str() << "\n";
#endif


#if 0
        // This might be cleaner, but the \r problem from windows is disconcerting
        std::ifstream checkersIss(filename);
        LOG_DEBUG << iss.str().c_str();
        if (!checkersIss.fail()) {
            game.Deserialize(iss, outboard);
            LOG_DEBUG << checkers.RvizGame()->Game().printDisplayFancy(outboard).c_str();
            game.Board() = outboard;
        }
#else
#endif

        // THIS DOESN'T WORK
#if 0
        int rosloglevel = nh.param<int>("~rosloglevel", 0); // 0 = debug

        if (ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, (ros::console::levels::Level) rosloglevel)) {
            ros::console::notifyLoggerLevelsChanged();
        }
#endif
#if 0
        // DOESN"T WORK NOW
        // ROS config - parameter list - save for comparison later
        std::string params = ReadRosParams(nh);
        Globals.WriteFile(Globals.ExeDirectory + "rosconfig.txt", params);
        path = ros::package::getPath(ROSPACKAGENAME);
        Globals._appproperties[ROSPACKAGENAME] = path;
#endif



#ifdef EXERCISER
        ExerciseDemo exercise(nh);
        IKinematics::_testspacing = root.get<double>("testharness.spacing", 0.5);
        IKinematics::_testoffset = root.get<double>("testharness.offset", 0.1);
        IKinematics::_testepsilon = root.get<double>("testharness.epsilon", 0.1);
        exercise.GoodColor() = GetIniTypes<double>(root, "testharness.GoodColor");
        exercise.BadColor() = GetIniTypes<double>(root, "testharness.BadColor");
        exercise.TrapColor() = GetIniTypes<double>(root, "testharness.TrapColor");
        exercise.Exercise(&nccmds[0]);
        exercise.Exercise(&nccmds[1]);
#endif
