       JointState joint, curjoint;

        joint.position = ToVector<double>(6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        std::cout << "TOVector Goal joints=" << VectorDump<double> (joint.position).c_str();
        jointWriter->JointTrajectoryPositionWrite(joint);
        JointState curjoints = jointReader->GetCurrentReadings();
        int n = 0;
        while( !MotionControl::AtGoal(joint, curjoints) && n++ < 100){
        //while (!VectorCompare(joint.position, curjoints.position) && n++ < 100) {
            curjoints = jointReader->GetCurrentReadings();
            std::cout << "Goal joints=" << VectorDump<double> (joint.position).c_str();
            std::cout << "Cur  joints=" << VectorDump<double> (curjoints.position).c_str();
            Globals.Sleep(100);
        }
        
        joint.position=ToVector<double>(6, 0.097, 0.007, -0.590, -0.172, 0.604, -0.142 );
        jointWriter->JointTrajectoryPositionWrite(joint);
        while( !MotionControl::AtGoal(joint, curjoints) && n++ < 100) {
            curjoints = jointReader->GetCurrentReadings();
            std::cout << "Goal joints=" << VectorDump<double> (joint.position).c_str();
            std::cout << "Cur  joints=" << VectorDump<double> (curjoints.position).c_str();
            Globals.Sleep(100);
        }







void DrawCheckerboard() {
    return;
    double xoffset = 1.0;
    double rowoffset=0.04;
    double yoffset = -0.5;
    double offset = 0.04;
    for (size_t row = 0; row < 8; row++) {
        
        double rowoffset = xoffset+ (offset*row);         
        for (size_t i = 0; i <=8; i = i + 2) {
            double coloffset=yoffset + (i*offset);
            if(row%2==0) coloffset=coloffset+offset; // red offset at zero
            
            Eigen::Vector3d up(rowoffset, coloffset, 0.01);
            Eigen::Vector3d down(rowoffset + offset, coloffset + offset, 0.0);

            visual_tools->publishCuboid(up, down, rviz_visual_tools::WHITE);
            ros::spinOnce();
            ros::spinOnce();
            ros::spinOnce();
            ros::spinOnce();
            ros::Duration(0.5).sleep();

            if (row % 2 == 0) coloffset = coloffset - offset; // red offset at zero
            else coloffset = coloffset + offset;
            Eigen::Vector3d bup(rowoffset, coloffset, 0.01);
            Eigen::Vector3d bdown(rowoffset + offset, coloffset + offset, 0.0);
            visual_tools->publishCuboid(bup, bdown,
                    rviz_visual_tools::BLACK);
            ros::spinOnce();
            ros::spinOnce();
            ros::spinOnce();
            ros::spinOnce();
        }
    }

}