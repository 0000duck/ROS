.TH "Conversion" 3 "Wed Sep 28 2016" "CRCL FANUC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Conversion \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "geometry_msgs::Pose \fBconvertPose\fP (const Eigen::Affine3d &pose)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBconvertPose\fP (const geometry_msgs::Pose &pose)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBconvertPoint32ToPose\fP (const geometry_msgs::Point32 &point)"
.br
.ti -1c
.RI "geometry_msgs::Pose \fBconvertPointToPose\fP (const geometry_msgs::Point &point)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBconvertPointToPose\fP (const Eigen::Vector3d &point)"
.br
.ti -1c
.RI "geometry_msgs::Point \fBconvertPoseToPoint\fP (const Eigen::Affine3d &pose)"
.br
.ti -1c
.RI "Eigen::Vector3d \fBconvertPoint\fP (const geometry_msgs::Point &point)"
.br
.ti -1c
.RI "Eigen::Vector3d \fBconvertPoint32\fP (const geometry_msgs::Point32 &point)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBGeomMsgPose2Affine3d\fP (const geometry_msgs::Pose &m)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBRcsPose2Affine3d\fP (const tf::Pose &pose)"
.br
.RI "\fIurdfPose2Affine3d converts urdf pose into an Eigen affine 4x4 matrix o represent the pose \fP"
.ti -1c
.RI "geometry_msgs::Point32 \fBconvertPoint32\fP (const Eigen::Vector3d &point)"
.br
.ti -1c
.RI "geometry_msgs::Point \fBconvertPoint\fP (const geometry_msgs::Vector3 &point)"
.br
.ti -1c
.RI "geometry_msgs::Point \fBconvertPoint\fP (const Eigen::Vector3d &point)"
.br
.ti -1c
.RI "geometry_msgs::Pose \fBRcsPose2GeomMsgPose\fP (const tf::Pose &m)"
.br
.ti -1c
.RI "geometry_msgs::Pose & \fBTfPose2GeometryPose\fP (tf::Pose &m, geometry_msgs::Pose &p)"
.br
.ti -1c
.RI "geometry_msgs::Pose \fBPoseAffineToGeomMsg\fP (const Eigen::Affine3d &e)"
.br
.ti -1c
.RI "tf::Pose \fBAffine3d2RcsPose\fP (const Eigen::Affine3d &pose)"
.br
.RI "\fIaffine3d2RcsPose converts an Eigen affine 4x4 matrix o represent the pose into a urdf pose vparam pose eigen Affine3d pose \fP"
.ti -1c
.RI "std::vector< geometry_msgs::Pose > \fBRcsPoses2PoseMsgs\fP (const std::vector< tf::Pose > &src)"
.br
.ti -1c
.RI "std::vector< tf::Pose > \fBPoseMsgs2RcsPoses\fP (const std::vector< geometry_msgs::Pose > &src)"
.br
.ti -1c
.RI "std::vector< Eigen::Affine3d > \fBPoseMsgs2AffEigenPoses\fP (const std::vector< geometry_msgs::Pose > &src)"
.br
.ti -1c
.RI "std::vector< geometry_msgs::Pose > \fBAffEigenPoses2PoseMsgs\fP (const std::vector< Eigen::Affine3d > &src)"
.br
.ti -1c
.RI "template<typename T > tf::Vector3 \fBvectorEigenToTF\fP (T e)"
.br
.ti -1c
.RI "template<typename T > tf::Vector3 \fBmatrixEigenToTfVector\fP (T e)"
.br
.ti -1c
.RI "tf::Pose \fBIdentity\fP ()"
.br
.ti -1c
.RI "tf::Pose & \fBGeometryPose2TfPose\fP (const geometry_msgs::Pose &m, tf::Pose &p)"
.br
.ti -1c
.RI "tf::Quaternion \fBquaternionEigenToTF\fP (const Eigen::Quaterniond &e)"
.br
.ti -1c
.RI "tf::Pose \fBGeomMsgPose2RcsPose\fP (const geometry_msgs::Pose &m)"
.br
.ti -1c
.RI "tf::Quaternion \fBRPYRadians\fP (double roll, double pitch, double yaw)"
.br
.ti -1c
.RI "tf::Quaternion \fBRPYDegrees\fP (double roll, double pitch, double yaw)"
.br
.ti -1c
.RI "Eigen::Translation3d \fBRcsPose2EigenPosition\fP (const geometry_msgs::Pose &pose)"
.br
.ti -1c
.RI "Eigen::Affine3d \fBEigenPosition2EigenAffine3d\fP (const Eigen::Translation3d &trans)"
.br
.ti -1c
.RI "Eigen::Vector3d \fBvectorTFToEigen\fP (tf::Vector3 t)"
.br
.ti -1c
.RI "\fBJointState\fP \fBJntPosVector2JointState\fP (const std::vector< double > &src)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "std::vector< geometry_msgs::Pose > Conversion::AffEigenPoses2PoseMsgs (const std::vector< Eigen::Affine3d > &src)"

.SS "tf::Pose Conversion::Affine3d2RcsPose (const Eigen::Affine3d &pose)"

.PP
affine3d2RcsPose converts an Eigen affine 4x4 matrix o represent the pose into a urdf pose vparam pose eigen Affine3d pose 
.PP
\fBReturns:\fP
.RS 4
urdf pose with position and rotation\&. 
.RE
.PP

.SS "Eigen::Vector3d Conversion::convertPoint (const geometry_msgs::Point &point)"

.SS "geometry_msgs::Point Conversion::convertPoint (const geometry_msgs::Vector3 &point)"

.SS "geometry_msgs::Point Conversion::convertPoint (const Eigen::Vector3d &point)"

.SS "Eigen::Vector3d Conversion::convertPoint32 (const geometry_msgs::Point32 &point)"

.SS "geometry_msgs::Point32 Conversion::convertPoint32 (const Eigen::Vector3d &point)"

.SS "Eigen::Affine3d Conversion::convertPoint32ToPose (const geometry_msgs::Point32 &point)"

.SS "geometry_msgs::Pose Conversion::convertPointToPose (const geometry_msgs::Point &point)"

.SS "Eigen::Affine3d Conversion::convertPointToPose (const Eigen::Vector3d &point)"

.SS "geometry_msgs::Pose Conversion::convertPose (const Eigen::Affine3d &pose)"

.SS "Eigen::Affine3d Conversion::convertPose (const geometry_msgs::Pose &pose)"

.SS "geometry_msgs::Point Conversion::convertPoseToPoint (const Eigen::Affine3d &pose)"

.SS "Eigen::Affine3d Conversion::EigenPosition2EigenAffine3d (const Eigen::Translation3d &trans)\fC [inline]\fP"

.SS "tf::Pose& Conversion::GeometryPose2TfPose (const geometry_msgs::Pose &m, tf::Pose &p)\fC [inline]\fP"

.SS "Eigen::Affine3d Conversion::GeomMsgPose2Affine3d (const geometry_msgs::Pose &m)"

.SS "tf::Pose Conversion::GeomMsgPose2RcsPose (const geometry_msgs::Pose &m)\fC [inline]\fP"

.SS "tf::Pose Conversion::Identity ()\fC [inline]\fP"

.SS "\fBJointState\fP Conversion::JntPosVector2JointState (const std::vector< double > &src)\fC [inline]\fP"

.SS "template<typename T > tf::Vector3 Conversion::matrixEigenToTfVector (Te)\fC [inline]\fP"

.SS "geometry_msgs::Pose Conversion::PoseAffineToGeomMsg (const Eigen::Affine3d &e)"

.SS "std::vector< Eigen::Affine3d > Conversion::PoseMsgs2AffEigenPoses (const std::vector< geometry_msgs::Pose > &src)"

.SS "std::vector< tf::Pose > Conversion::PoseMsgs2RcsPoses (const std::vector< geometry_msgs::Pose > &src)"

.SS "tf::Quaternion Conversion::quaternionEigenToTF (const Eigen::Quaterniond &e)\fC [inline]\fP"

.SS "Eigen::Affine3d Conversion::RcsPose2Affine3d (const tf::Pose &pose)"

.PP
urdfPose2Affine3d converts urdf pose into an Eigen affine 4x4 matrix o represent the pose 
.PP
\fBParameters:\fP
.RS 4
\fIpose\fP is the urdf pose with position and rotation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
eigen Affine3d pose 
.RE
.PP

.SS "Eigen::Translation3d Conversion::RcsPose2EigenPosition (const geometry_msgs::Pose &pose)\fC [inline]\fP"

.SS "geometry_msgs::Pose Conversion::RcsPose2GeomMsgPose (const tf::Pose &m)"

.SS "std::vector< geometry_msgs::Pose > Conversion::RcsPoses2PoseMsgs (const std::vector< tf::Pose > &src)"

.SS "tf::Quaternion Conversion::RPYDegrees (doubleroll, doublepitch, doubleyaw)\fC [inline]\fP"

.SS "tf::Quaternion Conversion::RPYRadians (doubleroll, doublepitch, doubleyaw)\fC [inline]\fP"

.SS "geometry_msgs::Pose & Conversion::TfPose2GeometryPose (tf::Pose &m, geometry_msgs::Pose &p)"

.SS "template<typename T > tf::Vector3 Conversion::vectorEigenToTF (Te)\fC [inline]\fP"

.SS "Eigen::Vector3d Conversion::vectorTFToEigen (tf::Vector3t)\fC [inline]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for CRCL FANUC from the source code\&.
