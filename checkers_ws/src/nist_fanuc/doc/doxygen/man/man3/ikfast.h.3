.TH "/usr/local/michalos/nistfanuc_ws/src/nist_fanuc/include/nist_fanuc/ikfast.h" 3 "Wed Sep 28 2016" "CRCL FANUC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/usr/local/michalos/nistfanuc_ws/src/nist_fanuc/include/nist_fanuc/ikfast.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br
\fC#include <list>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <cmath>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBikfast::IkSingleDOFSolutionBase< T >\fP"
.br
.ti -1c
.RI "class \fBikfast::IkSolutionBase< T >\fP"
.br
.ti -1c
.RI "class \fBikfast::IkSolutionListBase< T >\fP"
.br
.ti -1c
.RI "class \fBikfast::IkFastFunctions< T >\fP"
.br
.ti -1c
.RI "class \fBikfast::IkSolution< T >\fP"
.br
.ti -1c
.RI "class \fBikfast::IkSolutionList< T >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBikfast\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIKFAST_HAS_LIBRARY\fP"
.br
.RI "\fIHeader file for all ikfast c++ files/shared objects\&. \fP"
.ti -1c
.RI "#define \fBIKFAST_NO_MAIN\fP"
.br
.ti -1c
.RI "#define \fBIKFAST_HEADER_COMMON\fP"
.br
.ti -1c
.RI "#define \fBIKFAST_VERSION\fP   0x10000048"
.br
.ti -1c
.RI "#define \fBIKFAST_API\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef double \fBIkReal\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBIKFAST_API\fP bool \fBComputeIk\fP (const \fBIkReal\fP *eetrans, const \fBIkReal\fP *eerot, const \fBIkReal\fP *pfree, \fBikfast::IkSolutionListBase\fP< \fBIkReal\fP > &solutions)"
.br
.RI "\fIComputes all IK solutions given a end effector coordinates and the free joints\&. \fP"
.ti -1c
.RI "\fBIKFAST_API\fP bool \fBComputeIk2\fP (const \fBIkReal\fP *eetrans, const \fBIkReal\fP *eerot, const \fBIkReal\fP *pfree, \fBikfast::IkSolutionListBase\fP< \fBIkReal\fP > &solutions, void *pOpenRAVEManip)"
.br
.RI "\fISimilar to ComputeIk except takes OpenRAVE boost::shared_ptr<RobotBase::Manipulator>*\&. \fP"
.ti -1c
.RI "\fBIKFAST_API\fP void \fBComputeFk\fP (const \fBIkReal\fP *joints, \fBIkReal\fP *eetrans, \fBIkReal\fP *eerot)"
.br
.ti -1c
.RI "\fBIKFAST_API\fP int \fBGetNumFreeParameters\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP int * \fBGetFreeParameters\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP int \fBGetNumJoints\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP int \fBGetIkRealSize\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP const char * \fBGetIkFastVersion\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP int \fBGetIkType\fP ()"
.br
.ti -1c
.RI "\fBIKFAST_API\fP const char * \fBGetKinematicsHash\fP ()"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define IKFAST_API"

.SS "#define IKFAST_HAS_LIBRARY"

.PP
Header file for all ikfast c++ files/shared objects\&. The ikfast inverse kinematics compiler is part of OpenRAVE\&.
.PP
The file is divided into two sections:
.IP "\(bu" 2
\fBCommon\fP - the abstract classes section that all ikfast share regardless of their settings
.IP "\(bu" 2
\fBLibrary Specific\fP - the library-specific definitions, which depends on the precision/settings that the library was compiled with
.PP
.PP
The defines are as follows, they are also used for the ikfast C++ class:
.PP
.IP "\(bu" 2
IKFAST_HEADER_COMMON - common classes
.IP "\(bu" 2
IKFAST_HAS_LIBRARY - if defined, will include library-specific functions\&. by default this is off
.IP "\(bu" 2
IKFAST_CLIBRARY - Define this linking statically or dynamically to get correct visibility\&.
.IP "\(bu" 2
IKFAST_NO_MAIN - Remove the \fCmain\fP function, usually used with IKFAST_CLIBRARY
.IP "\(bu" 2
IKFAST_ASSERT - Define in order to get a custom assert called when NaNs, divides by zero, and other invalid conditions are detected\&.
.IP "\(bu" 2
IKFAST_REAL - Use to force a custom real number type for IkReal\&.
.IP "\(bu" 2
IKFAST_NAMESPACE - Enclose all functions and classes in this namespace, the \fCmain\fP function is excluded\&. 
.PP

.SS "#define IKFAST_HEADER_COMMON"

.SS "#define IKFAST_NO_MAIN"

.SS "#define IKFAST_VERSION   0x10000048"

.SH "Typedef Documentation"
.PP 
.SS "typedef double \fBIkReal\fP"

.SH "Function Documentation"
.PP 
.SS "\fBIKFAST_API\fP void ComputeFk (const \fBIkReal\fP *j, \fBIkReal\fP *eetrans, \fBIkReal\fP *eerot)"
solves the forward kinematics equations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpfree\fP is an array specifying the free joints of the chain\&. 
.RE
.PP

.SS "\fBIKFAST_API\fP bool ComputeIk (const \fBIkReal\fP *eetrans, const \fBIkReal\fP *eerot, const \fBIkReal\fP *pfree, \fBIkSolutionListBase\fP< \fBIkReal\fP > &solutions)"

.PP
Computes all IK solutions given a end effector coordinates and the free joints\&. 
.IP "\(bu" 2
\fCeetrans\fP - 3 translation values\&. For iktype \fBTranslationXYOrientation3D\fP, the z-axis is the orientation\&.
.IP "\(bu" 2
\fCeerot\fP
.IP "\(bu" 2
For \fBTransform6D\fP it is 9 values for the 3x3 rotation matrix\&.
.IP "\(bu" 2
For \fBDirection3D\fP, \fBRay4D\fP, and \fBTranslationDirection5D\fP, the first 3 values represent the target direction\&.
.IP "\(bu" 2
For \fBTranslationXAxisAngle4D\fP, \fBTranslationYAxisAngle4D\fP, and \fBTranslationZAxisAngle4D\fP the first value represents the angle\&.
.IP "\(bu" 2
For \fBTranslationLocalGlobal6D\fP, the diagonal elements ([0],[4],[8]) are the local translation inside the end effector coordinate system\&.
.PP
.PP
solves the inverse kinematics equations\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpfree\fP is an array specifying the free joints of the chain\&. 
.RE
.PP

.SS "\fBIKFAST_API\fP bool ComputeIk2 (const \fBIkReal\fP *eetrans, const \fBIkReal\fP *eerot, const \fBIkReal\fP *pfree, \fBikfast::IkSolutionListBase\fP< \fBIkReal\fP > &solutions, void *pOpenRAVEManip)"

.PP
Similar to ComputeIk except takes OpenRAVE boost::shared_ptr<RobotBase::Manipulator>*\&. 
.SS "\fBIKFAST_API\fP int* GetFreeParameters ()"

.SS "\fBIKFAST_API\fP const char* GetIkFastVersion ()"

.SS "\fBIKFAST_API\fP int GetIkRealSize ()"

.SS "\fBIKFAST_API\fP int GetIkType ()"

.SS "\fBIKFAST_API\fP const char* GetKinematicsHash ()"

.SS "\fBIKFAST_API\fP int GetNumFreeParameters ()"

.SS "\fBIKFAST_API\fP int GetNumJoints ()"

.SH "Author"
.PP 
Generated automatically by Doxygen for CRCL FANUC from the source code\&.
