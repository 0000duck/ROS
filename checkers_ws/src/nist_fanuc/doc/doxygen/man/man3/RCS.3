.TH "RCS" 3 "Wed Sep 28 2016" "CRCL FANUC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RCS \- 
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCController\fP"
.br
.RI "\fIThe \fBCController\fP provides a collection for all the relevant controller pieces\&. The \fBCController\fP is the main controller class to collect all the references/pointers to instances in the project\&. A global instance of this class, called 'Controller', is created and is used throughout the code to reference various instances of control objects (e\&.g\&., kinematics, joint writer, joint reader, etc\&.) \fP"
.ti -1c
.RI "class \fBCsvLogging\fP"
.br
.ti -1c
.RI "class \fBCMessageQueue\fP"
.br
.RI "\fIThe \fBCMessageQueue\fP offers a mutexed front to a STL/std deque\&. The queue is a LIFO data structure\&. Useful for safely sharing data between multiple threads\&. \fP"
.ti -1c
.RI "class \fBCMsgQueueThread\fP"
.br
.RI "\fI\fBCMsgQueueThread\fP is a message queued thread\&. It is activated when a message is received\&. 
.br
 Notes: http://stackoverflow.com/questions/768351/complete-example-using-boostsignals-for-c-eventing\&. \fP"
.ti -1c
.RI "class \fBThread\fP"
.br
.RI "\fI\fBThread\fP is an \fBRCS\fP ulapi equivalent for a timed thread\&. Given a cycle time, the thread provides a wait function to sleep to exactly the amount of the thread cycle time\&. It keeps track of busy/idle time for diagnostic purposes\&. 
.br
 Notes: https://www.quantnet.com/threads/c-multithreading-in-boost.10028/\&. \fP"
.ti -1c
.RI "class \fBTimer\fP"
.br
.RI "\fI\fBTimer\fP is a general-purpose timer\&. The \fBTimer\fP is a general-purpose timer, which can be used for waiting until a synchronous time tick, sleep for any period at all, or to obtain a time in system clock ticks from creation of the timer\&. \fP"
.ti -1c
.RI "struct \fBPoseTolerance\fP"
.br
.ti -1c
.RI "struct \fBCanonLengthUnit\fP"
.br
.RI "\fIenumeration of length units\&. \fBConversion\fP into ROS compatible meters\&. \fP"
.ti -1c
.RI "struct \fBTrajPointType\fP"
.br
.RI "\fIenumeration of trajectory pose points\&. \fP"
.ti -1c
.RI "struct \fBCanonAngleUnit\fP"
.br
.RI "\fIenumeration of angle units\&. \fBConversion\fP into ROS compatible radians\&. \fP"
.ti -1c
.RI "struct \fBCanonForceUnit\fP"
.br
.RI "\fIenumeration of force units\&. \fP"
.ti -1c
.RI "struct \fBCanonTorqueUnit\fP"
.br
.RI "\fIenumeration of torque units\&. \fP"
.ti -1c
.RI "struct \fBCanonReturn\fP"
.br
.RI "\fIenumeration of return type from Crcl intepretation\&. If statusreply, requires status sent to Crcl client\&. \fP"
.ti -1c
.RI "struct \fBCanonCmdType\fP"
.br
.RI "\fIenumeration of Crcl commands\&. Many Crcl commands are wm parameter setting and require no motion component\&. \fP"
.ti -1c
.RI "struct \fBCanonStopMotionType\fP"
.br
.RI "\fIenumeration of stopping motion, e\&.g\&., estop equivalent to immediate\&. \fP"
.ti -1c
.RI "struct \fBCanonAccProfile\fP"
.br
.RI "\fIenumeration of trajectory acceleration profile\&. \fP"
.ti -1c
.RI "struct \fBMovementType\fP"
.br
.RI "\fIenumeration of trajectory motion type, joint or cartesian\&. \fP"
.ti -1c
.RI "struct \fBCanonStatusType\fP"
.br
.RI "\fIenumeration of controller status types for individual commands\&. Note, even though command types are listed, not all used or supported\&. \fP"
.ti -1c
.RI "class \fBIRate\fP"
.br
.RI "\fI\fBIRate\fP is an interface class for defining the allowed motion rates\&. \fP"
.ti -1c
.RI "struct \fBCanonCmd\fP"
.br
.RI "\fI\fBCanonCmd\fP is the controller command structure\&. \fP"
.ti -1c
.RI "struct \fBCanonWorldModel\fP"
.br
.RI "\fI\fBCanonWorldModel\fP describes the controller state\&. Includes reference to robot model\&. \fP"
.ti -1c
.RI "class \fBIRCSInterpreter\fP"
.br
.RI "\fIIInterpreter parses a \fBRCS\fP command and generates robot motion commands\&. \fP"
.ti -1c
.RI "class \fBBangBangInterpreter\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int(* \fBRCS_TIMERFUNC\fP )(void *_arg)"
.br
.ti -1c
.RI "typedef tf::Pose \fBPose\fP"
.br
.ti -1c
.RI "typedef tf::Vector3 \fBPosition\fP"
.br
.ti -1c
.RI "typedef tf::Quaternion \fBRotation\fP"
.br
.ti -1c
.RI "typedef tf::Vector3 \fBVector3\fP"
.br
.ti -1c
.RI "typedef double \fBLength\fP"
.br
.ti -1c
.RI "typedef double \fBLinearVelocity\fP"
.br
.ti -1c
.RI "typedef double \fBAngularVelocity\fP"
.br
.ti -1c
.RI "typedef std::vector< double > \fBrobotAxes\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBgetRPY\fP (const \fBRCS::Pose\fP pose, double &roll, double &pitch, double &yaw)"
.br
.ti -1c
.RI "template<typename T > std::string \fBVectorDump\fP (std::vector< T > v)"
.br
.ti -1c
.RI "std::string \fBDumpPose\fP (\fBRCS::Pose\fP &pose)"
.br
.RI "\fIDumpPose takes a urdf pose and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. \fP"
.ti -1c
.RI "std::string \fBDumpEigenPose\fP (Eigen::Affine3d pose)"
.br
.ti -1c
.RI "std::string \fBDumpPoseSimple\fP (\fBRCS::Pose\fP pose)"
.br
.ti -1c
.RI "std::string \fBDumpJoints\fP (\fBJointState\fP joints)"
.br
.RI "\fIDumpJoints takes a list of joints and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. \fP"
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &os, \fBRCS::Pose\fP &pose)"
.br
.RI "\fIDumpPose takes a urdf pose and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. \fP"
.ti -1c
.RI "std::string \fBDumpQuaterion\fP (std::ostream &os, const \fBRCS::Rotation\fP &rot)"
.br
.RI "\fIDumpQuaterion takes a urdf quaterion and generates a string describing x,y,z,w coordinates\&. Can be used as std::cout << DumpQuaterion(urdf::rotation);\&. \fP"
.ti -1c
.RI "template<class Rep , class Period > double \fBToNanoseconds\fP (boost::chrono::duration< Rep, Period > d)"
.br
.ti -1c
.RI "template<class Rep , class Period > double \fBToSeconds\fP (boost::chrono::duration< Rep, Period > d)"
.br
.ti -1c
.RI "\fBJointState\fP \fBEmptyJointState\fP (size_t n)"
.br
.ti -1c
.RI "\fBJointState\fP \fBSubset\fP (\fBJointState\fP js, size_t n)"
.br
.ti -1c
.RI "std::vector< double > \fBSubset\fP (std::vector< double > position, size_t n)"
.br
.ti -1c
.RI "\fBJointState\fP \fBZeroJointState\fP (size_t numjoints)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "boost::mutex \fBcncmutex\fP"
.br
.ti -1c
.RI "boost::shared_ptr< \fBCController\fP > \fBFnc\fP = boost::shared_ptr<\fBCController\fP>(new \fBRCS::CController\fP(\fBDEFAULT_LOOP_CYCLE\fP))"
.br
.ti -1c
.RI "boost::shared_ptr< \fBCController\fP > \fBMnc\fP = boost::shared_ptr<\fBCController\fP>( new \fBRCS::CController\fP(\fBDEFAULT_LOOP_CYCLE\fP))"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef double \fBRCS::AngularVelocity\fP"

.SS "typedef double \fBRCS::Length\fP"

.SS "typedef double \fBRCS::LinearVelocity\fP"

.SS "typedef tf::Pose \fBRCS::Pose\fP"

.SS "typedef tf::Vector3 \fBRCS::Position\fP"

.SS "typedef int( * RCS::RCS_TIMERFUNC)(void *_arg)"

.SS "typedef std::vector<double> \fBRCS::robotAxes\fP"

.SS "typedef tf::Quaternion \fBRCS::Rotation\fP"

.SS "typedef tf::Vector3 \fBRCS::Vector3\fP"

.SH "Function Documentation"
.PP 
.SS "std::string RCS::DumpEigenPose (Eigen::Affine3dpose)\fC [inline]\fP"

.SS "std::string RCS::DumpJoints (\fBJointState\fPjoints)\fC [inline]\fP"

.PP
DumpJoints takes a list of joints and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. 
.SS "std::string RCS::DumpPose (\fBRCS::Pose\fP &pose)\fC [inline]\fP"

.PP
DumpPose takes a urdf pose and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. 
.SS "std::string RCS::DumpPoseSimple (\fBRCS::Pose\fPpose)\fC [inline]\fP"

.SS "std::string RCS::DumpQuaterion (std::ostream &os, const \fBRCS::Rotation\fP &rot)\fC [inline]\fP"

.PP
DumpQuaterion takes a urdf quaterion and generates a string describing x,y,z,w coordinates\&. Can be used as std::cout << DumpQuaterion(urdf::rotation);\&. 
.SS "\fBJointState\fP RCS::EmptyJointState (size_tn)\fC [inline]\fP"

.SS "void RCS::getRPY (const \fBRCS::Pose\fPpose, double &roll, double &pitch, double &yaw)"

.SS "std::ostream& RCS::operator<< (std::ostream &os, \fBRCS::Pose\fP &pose)\fC [inline]\fP"

.PP
DumpPose takes a urdf pose and generates a string describing pose\&. Can be used as std::cout << DumpPose(pose);\&. 
.SS "\fBJointState\fP RCS::Subset (\fBJointState\fPjs, size_tn)\fC [inline]\fP"

.SS "std::vector<double> RCS::Subset (std::vector< double >position, size_tn)\fC [inline]\fP"

.SS "template<class Rep , class Period > double RCS::ToNanoseconds (boost::chrono::duration< Rep, Period >d)"

.SS "template<class Rep , class Period > double RCS::ToSeconds (boost::chrono::duration< Rep, Period >d)"

.SS "template<typename T > std::string RCS::VectorDump (std::vector< T >v)\fC [inline]\fP"

.SS "\fBJointState\fP RCS::ZeroJointState (size_tnumjoints)\fC [inline]\fP"

.SH "Variable Documentation"
.PP 
.SS "boost::mutex RCS::cncmutex"

.SS "boost::shared_ptr< \fBCController\fP > RCS::Fnc = boost::shared_ptr<\fBCController\fP>(new \fBRCS::CController\fP(\fBDEFAULT_LOOP_CYCLE\fP))"

.SS "boost::shared_ptr< \fBCController\fP > RCS::Mnc = boost::shared_ptr<\fBCController\fP>( new \fBRCS::CController\fP(\fBDEFAULT_LOOP_CYCLE\fP))"

.SH "Author"
.PP 
Generated automatically by Doxygen for CRCL FANUC from the source code\&.
